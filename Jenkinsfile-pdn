pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'miguel1203/gestion-back'
        IMAGE_TAG = 'prod'
        DOCKER_USER = 'miguel1203'
        DOCKER_PASS = 'dckr_pat_5CQzKCl99YfG_0nuHQMiuxUw6AY'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }

        stage('Deploy Database') {
            steps {
                echo 'Deploying PostgreSQL PROD...'
                dir('DB') {
                    sh '''
                        echo "üöÄ Desplegando PostgreSQL PROD..."
                        docker compose -f docker-compose-prod.yml -p expense-db-prod up -d
                        sleep 30
                    '''
                }
            }
        }

        stage('Build Application') {
            steps {
                echo 'Building Spring Boot application...'
                dir('Back/ms_expense/ms_expense') {
                    sh 'chmod +x ./mvnw'
                    sh './mvnw clean package -DskipTests'
                }
            }
        }

        stage('Copy JAR to Dockerfile location') {
            steps {
                echo 'Copying JAR to Dockerfile location...'
                sh '''
                    mkdir -p ./Back/ms_expense/target
                    cp ./Back/ms_expense/ms_expense/target/*.jar ./Back/ms_expense/target/
                '''
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                echo 'Building and pushing Docker image...'
                dir('Back/ms_expense') {
                    script {
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'

                        def image = docker.build("${DOCKER_HUB_REPO}:${IMAGE_TAG}")
                        image.push()
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                echo 'Deploying application PROD...'
                sh '''
                    echo "üöÄ Desplegando aplicaci√≥n PROD..."
                    docker stop gestion-back-prod || true
                    docker rm gestion-back-prod || true

                    docker run -d \
                      --name gestion-back-prod \
                      --network expense-db-prod_default \
                      -p 8082:8080 \
                      -e SPRING_PROFILES_ACTIVE=prod \
                      -e SPRING_DATASOURCE_URL="jdbc:postgresql://postgres-expense-prod:5432/expense_db_prod" \
                      -e SPRING_DATASOURCE_USERNAME=postgres \
                      -e SPRING_DATASOURCE_PASSWORD=prod123456 \
                      ${DOCKER_HUB_REPO}:${IMAGE_TAG}
                '''
            }
        }

    }

    post {
        success {
            echo 'Pipeline execution completed.'
            echo '''

            ========================================
            ‚úÖ DEPLOYMENT SUCCESSFUL!
            ========================================
            üåê Application: http://localhost:8082
            üîç Health Check: http://localhost:8082/actuator/health
            üìä Metrics: http://localhost:8082/actuator/metrics
            üóÑÔ∏è Database: localhost:5434
            ========================================
            '''
        }
        failure {
            echo 'Deployment failed! Checking logs...'
            sh '''
                echo "Application logs:"
                docker logs gestion-back-prod || echo "No application logs available"
                echo "Database logs:"
                docker logs postgres-expense-prod || echo "No database logs available"
            '''
        }
        always {
            echo 'Pipeline execution completed.'
        }
    }
}